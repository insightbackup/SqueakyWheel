#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 18 13:40:18 2018

@author: rcarns
"""
import tweepy
import pandas as pd
import numpy as np
import pickle
from keys import twitterapi, postgresconnect

import keras
import nltk
import pandas as pd
import numpy as np
import re
import codecs
import textblob

# Gensim
import gensim
import gensim.corpora as corpora
from gensim.utils import simple_preprocess
from gensim.models import CoherenceModel

from nltk.tokenize import RegexpTokenizer


import warnings
warnings.filterwarnings("ignore",category=DeprecationWarning)
warnings.filterwarnings("ignore",category=UserWarning)


# get names of corporate twitters
CorpTwitters = pd.read_csv('CorpTwittersAll.txt',names=['Main','Support','Sector'])
ComplaintAccounts = CorpTwitters['Support'].apply(lambda x: x[1:].lower())
MainAccounts = CorpTwitters['Main'].apply(lambda x: x[1:].lower())
'''
# open file with stored tweets and read into dataframe
complaintpickle = open('complainttweets.dat','rb')
complaintweets = pickle.load(complaintpickle)
complaintpickle.close()
complainfilename = 'complaintweets.txt'
columns=['text','mentions','choose_one','class_label']
complaintframe = pd.DataFrame(columns=columns,index=range(len(complaintweets)))
i = 0
#with open(complainfilename,'w') as complainfile:
for tweet in complaintweets:
    tweettext = tweet['full_text']
    complaintframe.at[i,'text']=tweettext
    complaintframe.at[i,'mentions'] = tweet['entities']['user_mentions']
    complaintframe.at[i,'choose_one']='complaint'
    complaintframe.at[i,'class_label']=1
    i+=1
        
neutralpickle = open('neutraltweets.dat','rb')
neutraltweets = pickle.load(neutralpickle)
neutralpickle.close()
neutralfilename = 'neutraltweets.txt'
neutralframe = pd.DataFrame(columns=columns,index=range(len(neutraltweets)))
i=0
#with open(neutralfilename,'w') as neutralfile:
for tweet in neutraltweets:
        isComplaint=False
        for mention in tweet['entities']['user_mentions']:
            if mention['screen_name'].lower() in ComplaintAccounts:
                isComplaint=True
        if isComplaint==False:
            tweettext = tweet['full_text']
            neutralframe.at[i,'text']=tweettext
            neutralframe.at[i,'mentions'] = tweet['entities']['user_mentions']
            neutralframe.at[i,'choose_one']='neutral'
            neutralframe.at[i,'class_label']=0
            
            i+=1
'''
# get latest complaint tweet file
import glob
import os
complaintfilelist = glob.glob("./complaint*")
latest_complaint_file = max(complaintfilelist, key=os.path.getctime)

with open (latest_complaint_file,'rb') as picklefile:
    complaintframe = pickle.load(picklefile)
    
neutralfilelist = glob.glob("./neutral*")
latest_neutral_file = max(neutralfilelist, key=os.path.getctime)
with open(latest_neutral_file,'rb') as picklefile:
    neutralframe = pickle.load(picklefile)


import re
cList = {
  "ain't": "am not",
  "aren't": "are not",
  "can't": "cannot",
  "can't've": "cannot have",
  "'cause": "because",
  "could've": "could have",
  "couldn't": "could not",
  "couldn't've": "could not have",
  "didn't": "did not",
  "doesn't": "does not",
  "don't": "do not",
  "hadn't": "had not",
  "hadn't've": "had not have",
  "hasn't": "has not",
  "haven't": "have not",
  "he'd": "he would",
  "he'd've": "he would have",
  "he'll": "he will",
  "he'll've": "he will have",
  "he's": "he is",
  "how'd": "how did",
  "how'd'y": "how do you",
  "how'll": "how will",
  "how's": "how is",
  "I'd": "I would",
  "I'd've": "I would have",
  "I'll": "I will",
  "I'll've": "I will have",
  "I'm": "I am",
  "I've": "I have",
  "isn't": "is not",
  "it'd": "it had",
  "it'd've": "it would have",
  "it'll": "it will",
  "it'll've": "it will have",
  "it's": "it is",
  "let's": "let us",
  "ma'am": "madam",
  "mayn't": "may not",
  "might've": "might have",
  "mightn't": "might not",
  "mightn't've": "might not have",
  "must've": "must have",
  "mustn't": "must not",
  "mustn't've": "must not have",
  "needn't": "need not",
  "needn't've": "need not have",
  "o'clock": "of the clock",
  "oughtn't": "ought not",
  "oughtn't've": "ought not have",
  "shan't": "shall not",
  "sha'n't": "shall not",
  "shan't've": "shall not have",
  "she'd": "she would",
  "she'd've": "she would have",
  "she'll": "she will",
  "she'll've": "she will have",
  "she's": "she is",
  "should've": "should have",
  "shouldn't": "should not",
  "shouldn't've": "should not have",
  "so've": "so have",
  "so's": "so is",
  "that'd": "that would",
  "that'd've": "that would have",
  "that's": "that is",
  "there'd": "there had",
  "there'd've": "there would have",
  "there's": "there is",
  "they'd": "they would",
  "they'd've": "they would have",
  "they'll": "they will",
  "they'll've": "they will have",
  "they're": "they are",
  "they've": "they have",
  "to've": "to have",
  "wasn't": "was not",
  "we'd": "we had",
  "we'd've": "we would have",
  "we'll": "we will",
  "we'll've": "we will have",
  "we're": "we are",
  "we've": "we have",
  "weren't": "were not",
  "what'll": "what will",
  "what'll've": "what will have",
  "what're": "what are",
  "what's": "what is",
  "what've": "what have",
  "when's": "when is",
  "when've": "when have",
  "where'd": "where did",
  "where's": "where is",
  "where've": "where have",
  "who'll": "who will",
  "who'll've": "who will have",
  "who's": "who is",
  "who've": "who have",
  "why's": "why is",
  "why've": "why have",
  "will've": "will have",
  "won't": "will not",
  "won't've": "will not have",
  "would've": "would have",
  "wouldn't": "would not",
  "wouldn't've": "would not have",
  "y'all": "you all",
  "y'alls": "you alls",
  "y'all'd": "you all would",
  "y'all'd've": "you all would have",
  "y'all're": "you all are",
  "y'all've": "you all have",
  "you'd": "you had",
  "you'd've": "you would have",
  "you'll": "you you will",
  "you'll've": "you you will have",
  "you're": "you are",
  "you've": "you have"
}

c_re = re.compile('(%s)' % '|'.join(cList.keys()))

def expandContractions(text, c_re=c_re):
    def replace(match):
        return cList[match.group(0)]
    return c_re.sub(replace, text)


def clean_text(df,text_field):     
    # taken from 'How to Solve 90% of NLP Problems' 
    # remove links     
    df[text_field] = df[text_field].str.replace(r"http\S+", "")
    df[text_field] = df[text_field].str.replace(r"http", "")
    # remove @ mentions
    df[text_field] = df[text_field].str.replace(r"@\S+", "")
    #remove hashtags
    df[text_field] = df[text_field].str.replace(r"#\S+", "")
    #remove weird characters
    df[text_field] = df[text_field].str.replace(r"[^A-Za-z0-9(),!?@\'\`\"\_\n\(\)]", " ")
    df[text_field] = df[text_field].str.replace(r"@", "at")
    df[text_field] = df[text_field].str.replace(r"amp", "and")

    
    df[text_field] = df[text_field].str.lower()
    df[text_field] = df[text_field].apply(lambda x: expandContractions(x))
    df = df.fillna('')
    return df



    
train_tweets = pd.concat([complaintframe,neutralframe],0)
train_tweets = train_tweets.reset_index(drop=True)
train_tweets = clean_text(train_tweets,'text')
  # Import stopwords with scikit-learn
from sklearn.feature_extraction import text
stop = text.ENGLISH_STOP_WORDS.union(['amp','via','i_m','it_s','i','m']) 
#train_tweets['processed_text'] = train_tweets['processed_text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))
train_tweets['processed_text'] = train_tweets['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))
print(train_tweets['processed_text'][:3])
print(train_tweets['text'][:3])


tokenizer = RegexpTokenizer(r'\w+')
train_tweets.loc[:,"tokens"] = train_tweets.loc[:,"processed_text"].apply(tokenizer.tokenize)

data_words = train_tweets['tokens'][:]


# Build the bigram and trigram models
bigram = gensim.models.Phrases(data_words, min_count=5, threshold=5) # higher threshold fewer phrases.
trigram = gensim.models.Phrases(bigram[data_words], threshold=5)  

# Faster way to get a sentence clubbed as a trigram/bigram
bigram_mod = gensim.models.phrases.Phraser(bigram)
trigram_mod = gensim.models.phrases.Phraser(trigram)

# See trigram example
print(trigram_mod[bigram_mod[data_words[0:10]]])

def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]

def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

#train_tweets['tokens'] = trigram_mod[bigram_mod[train_tweets['tokens']]]
    
train_tweets['tokens'] = bigram_mod[train_tweets['tokens']]


train_tweets['tokens'][:10]
train_tweets['processed_text'] = train_tweets['tokens'].apply(' '.join)




train_tweets = train_tweets.dropna('rows','any') 
train_tweets.to_csv('train_tweets.csv')
    
    
    
    
    
    
    
    